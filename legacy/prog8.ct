#include "apue.h"
#include <errno.h>
#include <limits.h>

static void pr_sysconf(char *, int);
static void pr_pathconf(char *, char *, int);

int main(int argc, char *argv[]) {
 if(argc != 2)
  err_quit("usage: a.out <dirname>");

@while(getline <"sysconf.sym" > 0) {
^#ifdef $s^ $1
^ printf("$s defined to be %ld\n", (long)$s);^ $1, $1
#else
^ printf("no symbol for $s\n");^ $1
#endif
^#ifdef $s^ $2
^ pr_sysconf("$s =", $s);^ $1, $2
#else
^ printf("no symbol for $s\n");^ $2
#endif
@}
@close("sysconf.sym")

@while(getline <"pathconf.sym" > 0) {
^#ifdef $s^ $1
^ printf("$s defined to be %ld\n", (long)$s);^ $1, $1
#else
^ printf("no symbol for $s\n");^ $1
#endif
^#ifdef $s^ $2
^ pr_pathconf("$s =", argv[1], $s);^ $1, $2
#else
^ printf("no symbol for $s\n");^ $2
#endif
@}
@close("pathconf.sym")

 exit(0);
}

static void pr_sysconf(char *msg, int name) {
 long val;
 fputs(msg, stdout);
 errno = 0;
 if((val = sysconf(name)) < 0) {
  if(errno != 0) { 
   if(errno == EINVAL) fputs(" (not supported)\n", stdout);
   else err_sys("sysconf error");
  } else {
   fputs(" (no limit)\n", stdout);
  }
 } else {
  printf(" %ld\n", val);
 }
}

static void pr_pathconf(char *msg, char *path, int name) {
 long val;
 fputs(msg, stdout);
 errno = 0;
 if((val = pathconf(path, name)) < 0) {
  if(errno != 0) { 
   if(errno == EINVAL) fputs(" (not supported)\n", stdout);
   else err_sys("pathconf error");
  } else {
   fputs(" (no limit)\n", stdout);
  }
 } else {
  printf(" %ld\n", val);
 }
}

