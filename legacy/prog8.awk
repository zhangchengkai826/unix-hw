BEGIN {
printf("#include \"apue.h\"\n")
printf("#include <errno.h>\n")
printf("#include <limits.h>\n")
printf("\n")
printf("static void pr_sysconf(char *, int);\n")
printf("static void pr_pathconf(char *, char *, int);\n")
printf("\n")
printf("int main(int argc, char *argv[]) {\n")
printf(" if(argc != 2)\n")
printf("  err_quit(\"usage: a.out <dirname>\");\n")
printf("\n")
while(getline <"sysconf.sym" > 0) {
printf("#ifdef %s\n", $1)
printf(" printf(\"%s defined to be %%ld\\n\", (long)%s);\n", $1, $1)
printf("#else\n")
printf(" printf(\"no symbol for %s\\n\");\n", $1)
printf("#endif\n")
printf("#ifdef %s\n", $2)
printf(" pr_sysconf(\"%s =\", %s);\n", $1, $2)
printf("#else\n")
printf(" printf(\"no symbol for %s\\n\");\n", $2)
printf("#endif\n")
}
close("sysconf.sym")
printf("\n")
while(getline <"pathconf.sym" > 0) {
printf("#ifdef %s\n", $1)
printf(" printf(\"%s defined to be %%ld\\n\", (long)%s);\n", $1, $1)
printf("#else\n")
printf(" printf(\"no symbol for %s\\n\");\n", $1)
printf("#endif\n")
printf("#ifdef %s\n", $2)
printf(" pr_pathconf(\"%s =\", argv[1], %s);\n", $1, $2)
printf("#else\n")
printf(" printf(\"no symbol for %s\\n\");\n", $2)
printf("#endif\n")
}
close("pathconf.sym")
printf("\n")
printf(" exit(0);\n")
printf("}\n")
printf("\n")
printf("static void pr_sysconf(char *msg, int name) {\n")
printf(" long val;\n")
printf(" fputs(msg, stdout);\n")
printf(" errno = 0;\n")
printf(" if((val = sysconf(name)) < 0) {\n")
printf("  if(errno != 0) { \n")
printf("   if(errno == EINVAL) fputs(\" (not supported)\\n\", stdout);\n")
printf("   else err_sys(\"sysconf error\");\n")
printf("  } else {\n")
printf("   fputs(\" (no limit)\\n\", stdout);\n")
printf("  }\n")
printf(" } else {\n")
printf("  printf(\" %%ld\\n\", val);\n")
printf(" }\n")
printf("}\n")
printf("\n")
printf("static void pr_pathconf(char *msg, char *path, int name) {\n")
printf(" long val;\n")
printf(" fputs(msg, stdout);\n")
printf(" errno = 0;\n")
printf(" if((val = pathconf(path, name)) < 0) {\n")
printf("  if(errno != 0) { \n")
printf("   if(errno == EINVAL) fputs(\" (not supported)\\n\", stdout);\n")
printf("   else err_sys(\"pathconf error\");\n")
printf("  } else {\n")
printf("   fputs(\" (no limit)\\n\", stdout);\n")
printf("  }\n")
printf(" } else {\n")
printf("  printf(\" %%ld\\n\", val);\n")
printf(" }\n")
printf("}\n")
printf("\n")
}
